import React, { useState } from 'react';
import { useLiveQuery } from 'dexie-react-hooks';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import { Folder, Palette, Trash2, Plus, Dices, Target, Euro, GripVertical, Edit, FolderOpen } from 'lucide-react';
import Card from './ui/Card';
import PageHeader from './ui/PageHeader';
import ConfirmationModal from './ui/ConfirmationModal';
import CategoryEditModal from './CategoryEditModal';
import { db } from '../utils/db';

const SettingsPage = ({ settings, setSettings, categories, setCategories }) => {
  // Make db globally available for debugging
  React.useEffect(() => {
    if (typeof window !== 'undefined') {
      window.db = db;
    }
  }, []);
  // Live-Daten aus der Datenbank
  const liveCategories = useLiveQuery(() => db.categories.toArray(), []) || [];
  const budgets = useLiveQuery(() => db.budgets.toArray(), []) || [];
  
  const [catName, setCatName] = useState('');
  const [catColor, setCatColor] = useState('#8B5CF6');
  const [categoryToDelete, setCategoryToDelete] = useState(null);
  const [isConfirmOpen, setConfirmOpen] = useState(false);
  
  // Category Edit Modal States
  const [editingCategory, setEditingCategory] = useState(null);
  const [isEditModalOpen, setEditModalOpen] = useState(false);
  
  // Budget States
  const [editingBudgets, setEditingBudgets] = useState({});

  const handleAddCategory = async (e) => { 
    e.preventDefault(); 
    if (catName.trim() === '') return; 
    
    try {
      await db.categories.add({ name: catName, color: catColor });
      setCatName(''); 
      setCatColor('#8B5CF6'); 
    } catch (error) {
      console.error('Fehler beim Hinzufügen der Kategorie:', error);
    }
  };

  const handleDeleteRequest = (id) => { 
    setCategoryToDelete(id); 
    setConfirmOpen(true); 
  };

  const handleDeleteConfirm = async () => { 
    try {
      await db.categories.delete(categoryToDelete);
      // Auch zugehörige Budgets löschen
      await db.budgets.where('categoryName').equals(
        liveCategories.find(c => c.id === categoryToDelete)?.name
      ).delete();
    } catch (error) {
      console.error('Fehler beim Löschen:', error);
    }
    setConfirmOpen(false); 
    setCategoryToDelete(null); 
  };

  const generateRandomColor = () => { 
    const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0'); 
    setCatColor(randomColor); 
  };
  
  // Auto-fix database schema if needed
  React.useEffect(() => {
    const checkAndFixDatabase = async () => {
      try {
        const allCats = await db.categories.toArray();
        
        // Check if categories have parentId field
        const hasParentIdField = allCats.every(cat => 'parentId' in cat);
        
        if (!hasParentIdField) {
          // Add parentId field to existing categories
          await Promise.all(
            allCats.map(cat => 
              db.categories.update(cat.id, { parentId: cat.parentId || null })
            )
          );
        }
        
        // Auto-create demo subcategory if none exist (only in development)
        if (process.env.NODE_ENV === 'development') {
          const subcategories = allCats.filter(cat => cat.parentId);
          if (subcategories.length === 0 && allCats.length > 0) {
            const parentCategory = allCats[0];
            await db.categories.add({
              name: `${parentCategory.name} - Demo Unterkategorie`,
              color: '#10B981',
              parentId: parentCategory.id
            });
          }
        }
        
      } catch (error) {
        console.error('Database initialization failed:', error);
      }
    };
    
    if (liveCategories.length > 0) {
      checkAndFixDatabase();
    }
  }, [liveCategories.length]);
  
  // Organize categories into hierarchical structure
  const organizedCategories = React.useMemo(() => {
    const mainCategories = liveCategories.filter(cat => !cat.parentId);
    
    return mainCategories.map(mainCat => ({
      ...mainCat,
      subcategories: liveCategories.filter(cat => cat.parentId === mainCat.id)
    }));
  }, [liveCategories]);
  
  // Budget-Funktionen
  const getCurrentBudget = (categoryName) => {
    const currentDate = new Date();
    return budgets.find(b => 
      b.categoryName === categoryName && 
      b.month === currentDate.getMonth() && 
      b.year === currentDate.getFullYear()
    )?.amount || 0;
  };
  
  const handleBudgetChange = (categoryName, value) => {
    setEditingBudgets(prev => ({
      ...prev,
      [categoryName]: value
    }));
  };
  
  const saveBudget = async (categoryName) => {
    const budgetAmount = parseFloat(editingBudgets[categoryName]) || 0;
    const currentDate = new Date();
    
    try {
      // Prüfe ob Budget bereits existiert
      const existingBudget = budgets.find(b => 
        b.categoryName === categoryName && 
        b.month === currentDate.getMonth() && 
        b.year === currentDate.getFullYear()
      );
      
      if (existingBudget) {
        await db.budgets.update(existingBudget.id, { amount: budgetAmount });
      } else {
        await db.budgets.add({
          categoryName,
          amount: budgetAmount,
          month: currentDate.getMonth(),
          year: currentDate.getFullYear()
        });
      }
      
      // Bearbeitung beenden
      setEditingBudgets(prev => {
        const newState = { ...prev };
        delete newState[categoryName];
        return newState;
      });
    } catch (error) {
      console.error('Fehler beim Speichern des Budgets:', error);
    }
  };
  
  // Drag & Drop Handler
  const handleDragEnd = async (result) => {
    if (!result.destination && !result.combine) return;
    
    const { source, destination, draggableId, combine } = result;
    
    // If dropped in same position, do nothing
    if (!combine && source.droppableId === destination.droppableId && source.index === destination.index) {
      return;
    }
    
    try {
      const draggedCategory = liveCategories.find(cat => cat.id.toString() === draggableId);
      if (!draggedCategory) return;
      
      // Handle combining categories (drag one onto another)
      if (combine) {
        const targetCategory = liveCategories.find(cat => cat.id.toString() === combine.draggableId);
        if (targetCategory && draggedCategory.id !== targetCategory.id) {
          // Prevent circular references (can't make parent a child of its own child)
          const wouldCreateCircle = isCircularReference(targetCategory.id, draggedCategory.id);
          if (wouldCreateCircle) {
            console.warn('Cannot create circular reference');
            return;
          }
          
          // Make dragged category a subcategory of target
          await db.categories.update(draggedCategory.id, { parentId: targetCategory.id });
          return;
        }
      }
      
      // Handle moving to/from subcategory areas
      if (destination) {
        if (destination.droppableId.startsWith('subcategories-')) {
          // Moving to subcategory area
          const parentId = parseInt(destination.droppableId.replace('subcategories-', ''));
          
          // Prevent circular references
          const wouldCreateCircle = isCircularReference(parentId, draggedCategory.id);
          if (wouldCreateCircle) {
            console.warn('Cannot create circular reference');
            return;
          }
          
          await db.categories.update(draggedCategory.id, { parentId });
        } else if (destination.droppableId === 'main-categories') {
          // Moving to main category area
          await db.categories.update(draggedCategory.id, { parentId: null });
        }
      }
    } catch (error) {
      console.error('Fehler beim Drag & Drop:', error);
    }
  };
  
  // Helper function to prevent circular references
  const isCircularReference = (newParentId, categoryId) => {
    // Check if making categoryId a child of newParentId would create a circle
    const checkParent = (currentId) => {
      if (currentId === categoryId) return true;
      const parent = liveCategories.find(cat => cat.id === currentId);
      if (parent && parent.parentId) {
        return checkParent(parent.parentId);
      }
      return false;
    };
    
    return checkParent(newParentId);
  };
  
  // Category Edit Functions
  const handleEditCategory = (category) => {
    setEditingCategory({
      ...category,
      currentBudget: getCurrentBudget(category.name)
    });
    setEditModalOpen(true);
  };
  
  const handleSaveCategory = async (categoryData, budgetAmount) => {
    try {
      if (editingCategory?.id) {
        // Update existing category
        await db.categories.update(editingCategory.id, categoryData);
        
        // Update budget if changed
        const currentBudget = getCurrentBudget(editingCategory.name);
        if (budgetAmount !== currentBudget) {
          await saveBudgetForCategory(categoryData.name, budgetAmount);
        }
      } else {
        // Add new category
        const newCatId = await db.categories.add(categoryData);
        if (budgetAmount > 0) {
          await saveBudgetForCategory(categoryData.name, budgetAmount);
        }
      }
    } catch (error) {
      console.error('Fehler beim Speichern der Kategorie:', error);
    }
  };
  
  const handleDeleteCategory = async (categoryId) => {
    try {
      const category = liveCategories.find(c => c.id === categoryId);
      if (!category) return;
      
      await db.categories.delete(categoryId);
      // Auch zugehörige Budgets löschen
      await db.budgets.where('categoryName').equals(category.name).delete();
    } catch (error) {
      console.error('Fehler beim Löschen der Kategorie:', error);
    }
  };
  
  const saveBudgetForCategory = async (categoryName, budgetAmount) => {
    const currentDate = new Date();
    
    const existingBudget = budgets.find(b => 
      b.categoryName === categoryName && 
      b.month === currentDate.getMonth() && 
      b.year === currentDate.getFullYear()
    );
    
    if (existingBudget) {
      await db.budgets.update(existingBudget.id, { amount: budgetAmount });
    } else {
      await db.budgets.add({
        categoryName,
        amount: budgetAmount,
        month: currentDate.getMonth(),
        year: currentDate.getFullYear()
      });
    }
  };

  return (
    <div className="p-4 md:p-6 xl:p-8 bg-slate-50 min-h-screen font-sans w-full overflow-hidden">
      <div className="w-full max-w-6xl mx-auto">
        {/* Modern Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Einstellungen</h1>
              <p className="text-slate-600 mt-1">Verwalte deine Kategorien und App-Einstellungen</p>
            </div>
            <div className="flex items-center gap-3">
              <div className="bg-white rounded-lg px-4 py-2 shadow-sm border border-slate-200">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="text-sm font-medium text-slate-700">{liveCategories.length} Kategorien</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="space-y-6">
          {/* Kategorien Verwaltung */}
          <Card className="overflow-hidden">
            <div className="bg-gradient-to-r from-slate-800 to-slate-900 px-6 py-6">
              <h3 className="text-xl font-bold flex items-center gap-3 text-white">
                <Palette className="text-white/90" />
                <span>Kategorien verwalten</span>
              </h3>
              <p className="text-slate-300 mt-2">
                Organisiere deine Ausgabenkategorien mit Drag & Drop
              </p>
            </div>
          
          <div className="p-6">
            <DragDropContext onDragEnd={handleDragEnd}>
              <div className="space-y-4 mb-6">
                <Droppable droppableId="main-categories" type="CATEGORY" isCombineEnabled={true}>
                  {(provided, snapshot) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.droppableProps}
                      className={`space-y-3 transition-colors duration-200 ${snapshot.isDraggingOver ? 'bg-indigo-50 rounded-xl p-3' : ''}`}
                    >
                      {organizedCategories.map((category, index) => (
                        <div key={category.id}>
                          <Draggable draggableId={category.id.toString()} index={index}>
                            {(provided, snapshot) => {
                              const isDragging = snapshot.isDragging;
                              const isDropTarget = snapshot.combineTargetFor;
                              
                              return (
                                <div
                                  ref={provided.innerRef}
                                  {...provided.draggableProps}
                                  className={`group bg-white border transition-all duration-200 rounded-xl relative ${
                                    isDragging 
                                      ? 'shadow-lg scale-105 rotate-2 border-indigo-300 z-50' 
                                      : isDropTarget
                                        ? 'border-green-300 bg-green-50 shadow-md scale-102'
                                        : 'border-slate-200 hover:shadow-md hover:border-slate-300'
                                  }`}
                                >
                                  {isDropTarget && (
                                    <div className="absolute inset-0 border-2 border-green-400 border-dashed rounded-xl bg-green-100/50 flex items-center justify-center z-10">
                                      <div className="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-medium shadow-lg">
                                        Als Unterkategorie hinzufügen
                                      </div>
                                    </div>
                                  )}
                                <div className="p-4">
                                  <div className="flex items-center justify-between">
                                    {/* Clickable Category Card */}
                                    <div 
                                      className="flex items-center justify-between w-full cursor-pointer"
                                      onClick={() => handleEditCategory(category)}
                                    >
                                      <div className="flex items-center gap-4">
                                        <div
                                          {...provided.dragHandleProps}
                                          className="p-2 text-slate-400 hover:text-slate-600 cursor-grab active:cursor-grabbing opacity-0 group-hover:opacity-100 transition-opacity"
                                          onClick={(e) => e.stopPropagation()}
                                        >
                                          <GripVertical className="w-5 h-5" />
                                        </div>
                                        <div className="relative">
                                          <div 
                                            className="w-8 h-8 rounded-xl shadow-lg ring-2 ring-white" 
                                            style={{ backgroundColor: category.color }}
                                          ></div>
                                        </div>
                                        <div className="flex items-center gap-3">
                                          <div>
                                            <span className="font-bold text-slate-900 text-xl">{category.name}</span>
                                            {category.subcategories.length > 0 && (
                                              <div className="flex items-center gap-3 mt-2">
                                                <div className="flex items-center gap-2 bg-gradient-to-r from-indigo-100 to-blue-100 text-indigo-800 px-3 py-1.5 rounded-full text-xs font-bold shadow-sm border border-indigo-200">
                                                  <FolderOpen className="w-4 h-4" />
                                                  <span>{category.subcategories.length} Unterkategorie{category.subcategories.length !== 1 ? 'n' : ''}</span>
                                                </div>
                                                <div className="flex -space-x-0.5">
                                                  {category.subcategories.slice(0, 4).map((sub, index) => (
                                                    <div 
                                                      key={sub.id}
                                                      className="w-6 h-6 rounded-lg border-2 border-white shadow-md hover:scale-110 transition-transform duration-200" 
                                                      style={{ 
                                                        backgroundColor: sub.color,
                                                        zIndex: category.subcategories.length - index
                                                      }}
                                                      title={sub.name}
                                                    ></div>
                                                  ))}
                                                  {category.subcategories.length > 4 && (
                                                    <div className="w-6 h-6 rounded-lg bg-gradient-to-br from-slate-300 to-slate-400 border-2 border-white shadow-md flex items-center justify-center text-white font-bold text-xs hover:scale-110 transition-transform duration-200">
                                                      +{category.subcategories.length - 4}
                                                    </div>
                                                  )}
                                                </div>
                                              </div>
                                            )}
                                          </div>
                                        </div>
                                      </div>
                                      
                                      <div className="flex items-center gap-2">
                                        <div className="text-slate-400 opacity-0 group-hover:opacity-100 transition-opacity">
                                          <span className="text-sm font-medium">Klicken zum Bearbeiten</span>
                                        </div>
                                        <button 
                                          onClick={(e) => {
                                            e.stopPropagation();
                                            handleDeleteRequest(category.id);
                                          }}
                                          className="p-2 text-slate-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-all duration-200 opacity-0 group-hover:opacity-100"
                                          title="Kategorie löschen"
                                        >
                                          <Trash2 className="w-4 h-4" />
                                        </button>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                
                          
                          {/* Subcategories - Enhanced hierarchy design */}
                          {category.subcategories.length > 0 && (
                            <div className="mt-4">
                              {/* Simplified hierarchy container */}
                              <div className="ml-8">
                                <Droppable droppableId={`subcategories-${category.id}`} type="SUBCATEGORY" isCombineEnabled={false}>
                                  {(provided, snapshot) => (
                                    <div
                                      ref={provided.innerRef}
                                      {...provided.droppableProps}
                                      className={`space-y-3 transition-all duration-300 ${
                                        snapshot.isDraggingOver 
                                          ? 'bg-gradient-to-r from-indigo-50 to-blue-50 border-2 border-dashed border-indigo-300 rounded-xl p-4 shadow-inner' 
                                          : 'py-2'
                                      }`}
                                    >
                                      {snapshot.isDraggingOver && (
                                        <div className="text-center py-3 text-indigo-700 font-semibold text-sm bg-white/80 rounded-lg shadow-sm">
                                          ✨ Hier als Unterkategorie einfügen ✨
                                        </div>
                                      )}
                                      
                                      {category.subcategories.map((subcat, subIndex) => (
                                        <Draggable key={subcat.id} draggableId={subcat.id.toString()} index={subIndex}>
                                          {(provided, snapshot) => (
                                            <div
                                              ref={provided.innerRef}
                                              {...provided.draggableProps}
                                              className={`group relative transition-all duration-300 ${
                                                snapshot.isDragging 
                                                  ? 'scale-105 rotate-1 z-50 shadow-2xl' 
                                                  : 'hover:scale-102'
                                              }`}
                                              onClick={() => handleEditCategory(subcat)}
                                            >
                                                
                                                {/* Subcategory Card - Simplified */}
                                                <div
                                                  className={`bg-white rounded-xl shadow-sm border-2 cursor-pointer transition-all duration-300 relative overflow-hidden ${
                                                    snapshot.isDragging 
                                                      ? 'border-indigo-400 shadow-xl bg-gradient-to-br from-white to-indigo-50' 
                                                      : 'border-slate-200 hover:border-slate-300 hover:shadow-md'
                                                  }`}
                                                  style={{
                                                    marginRight: '1.5rem',
                                                  }}
                                                >
                                                  <div className="p-4">
                                                    <div className="flex items-center justify-between">
                                                      <div className="flex items-center gap-4">
                                                        <div
                                                          {...provided.dragHandleProps}
                                                          className="p-2 text-slate-300 hover:text-slate-500 cursor-grab active:cursor-grabbing opacity-0 group-hover:opacity-100 transition-all duration-200 rounded-lg hover:bg-slate-100"
                                                          onClick={(e) => e.stopPropagation()}
                                                        >
                                                          <GripVertical className="w-4 h-4" />
                                                        </div>
                                                        
                                                        <div className="flex items-center gap-3">
                                                          <div 
                                                            className="w-8 h-8 rounded-xl shadow-md border-2 border-white" 
                                                            style={{ backgroundColor: subcat.color }}
                                                          ></div>
                                                          
                                                          <div>
                                                            <h4 className="font-bold text-slate-800 text-lg leading-tight">{subcat.name}</h4>
                                                          </div>
                                                        </div>
                                                      </div>
                                                      
                                                      <div className="flex items-center gap-2">
                                                        <div className="text-slate-400 opacity-0 group-hover:opacity-100 transition-all duration-200">
                                                          <span className="text-xs font-semibold bg-slate-100 px-2 py-1 rounded-full">Klicken zum Bearbeiten</span>
                                                        </div>
                                                        <button
                                                          onClick={(e) => {
                                                            e.stopPropagation();
                                                            handleDeleteRequest(subcat.id);
                                                          }}
                                                          className="p-2 text-slate-300 hover:text-red-500 hover:bg-red-50 rounded-lg transition-all duration-200 opacity-0 group-hover:opacity-100"
                                                          title="Löschen"
                                                        >
                                                          <Trash2 className="w-4 h-4" />
                                                        </button>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  
                                                  {/* Hover glow effect */}
                                                  <div 
                                                    className="absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity duration-300 rounded-xl"
                                                    style={{ backgroundColor: subcat.color }}
                                                  ></div>
                                                </div>
                                              </div>
                                            )}
                                          </Draggable>
                                      ))}
                                      {provided.placeholder}
                                    </div>
                                  )}
                                </Droppable>
                              </div>
                            </div>
                          )}
                      {provided.placeholder}
                    </div>
                  )}
                </Droppable>
              </div>
            </DragDropContext>
          
            {/* Neue Kategorie hinzufügen */}
            <div className="pt-6 border-t border-slate-200">
              <div className="bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl p-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="font-bold text-slate-800 flex items-center gap-2">
                    <Plus className="w-5 h-5 text-indigo-600" />
                    Neue Kategorie hinzufügen
                  </h4>
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <button
                    onClick={() => {
                      setEditingCategory(null);
                      setEditModalOpen(true);
                    }}
                    className="h-14 px-6 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl hover:from-indigo-700 hover:to-purple-700 transition-all flex items-center justify-center gap-3 shadow-lg hover:shadow-xl font-semibold"
                  >
                    <Plus className="w-5 h-5" />
                    Hauptkategorie erstellen
                  </button>
                  <button
                    onClick={async () => {
                      // Test: Create subcategory if we have categories
                      if (liveCategories.length > 0) {
                        const parentCategory = liveCategories[0];
                        console.log('Creating subcategory for:', parentCategory);
                        const newSubcat = {
                          name: `${parentCategory.name} Sub ${Date.now()}`,
                          color: '#10B981',
                          parentId: parentCategory.id
                        };
                        console.log('Adding subcategory:', newSubcat);
                        const result = await db.categories.add(newSubcat);
                        console.log('Added subcategory with ID:', result);
                        
                        // Check if it was added correctly
                        const allCats = await db.categories.toArray();
                        console.log('All categories after adding:', allCats);
                      } else {
                        alert('Erstelle erst eine Hauptkategorie!');
                      }
                    }}
                    className="h-14 px-6 bg-green-600 hover:bg-green-700 text-white rounded-xl transition-all flex items-center justify-center gap-3 shadow-lg hover:shadow-xl font-semibold"
                  >
                    <Plus className="w-5 h-5" />
                    Test Unterkategorie
                  </button>
                  <button
                    onClick={async () => {
                      console.log('=== DATABASE DEBUG INFO ===');
                      console.log('Database version:', db.verno);
                      
                      const allCats = await db.categories.toArray();
                      console.log('All categories in DB:', allCats);
                      
                      console.log('Live categories in component:', liveCategories);
                      console.log('Organized categories:', organizedCategories);
                      
                      const mainCats = allCats.filter(cat => !cat.parentId);
                      const subCats = allCats.filter(cat => cat.parentId);
                      console.log('Main categories:', mainCats);
                      console.log('Subcategories:', subCats);
                      
                      alert(`DB Version: ${db.verno}, Total Categories: ${allCats.length}, Main: ${mainCats.length}, Sub: ${subCats.length}`);
                    }}
                    className="h-14 px-6 bg-orange-600 hover:bg-orange-700 text-white rounded-xl transition-all flex items-center justify-center gap-3 shadow-lg hover:shadow-xl font-semibold"
                  >
                    <Plus className="w-5 h-5" />
                    Debug DB
                  </button>
                  
                  {/* Quick Tips */}
                  <div className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl">
                    <h5 className="font-bold text-blue-900 mb-3 flex items-center gap-2">
                      <span className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></span>
                      Schnelle Tipps
                    </h5>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800">
                      <div className="flex items-center gap-2">
                        <span className="font-semibold">•</span>
                        <span>Ziehe Kategorien aufeinander für Hierarchien</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="font-semibold">•</span>
                        <span>Klicke auf Kategorien zum Bearbeiten</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="font-semibold">•</span>
                        <span>Ziehe Unterkategorien heraus für Hauptkategorien</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <span className="font-semibold">•</span>
                        <span>Verwende den Grip-Handle zum Verschieben</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </Card>
        </div>
      </div>
      <ConfirmationModal 
        isOpen={isConfirmOpen} 
        onClose={() => setConfirmOpen(false)} 
        onConfirm={handleDeleteConfirm} 
        title="Kategorie löschen" 
        message="Möchtest du diese Kategorie wirklich löschen? Transaktionen mit dieser Kategorie müssen neu kategorisiert werden." 
      />
      
      <CategoryEditModal
        category={editingCategory}
        isOpen={isEditModalOpen}
        onClose={() => {
          setEditModalOpen(false);
          setEditingCategory(null);
        }}
        onSave={handleSaveCategory}
        onDelete={handleDeleteCategory}
      />
    </div>
  );
};


export default SettingsPage;